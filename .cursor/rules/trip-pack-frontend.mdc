- 기술 스택
  - React 19 함수형 컴포넌트 + TypeScript(strict). Vite 7 번들. 라우팅은 TanStack Router(file-based).
  - UI는 Chakra UI v3 사용. 스타일은 Chakra 시스템 프롭/시맨틱 토큰 우선. emotion `css` prop은 보조적으로만 사용.
  - 다음은 미사용: styled-components, axios. 네트워킹 필요 시 `fetch` 래퍼를 `shared/api`에 추가.

- 파일 구조/네이밍
  - 라우트: `src/routes`에서 파일 기반(`createFileRoute`/`createRootRoute`). 코드젠 `routeTree.gen.ts`는 수정 금지.
  - 도메인: `src/features/<도메인>/<세부>/` 하위에 `components`(PascalCase), `hooks`(useXxx.ts), 기타 유틸(camelCase.ts).
  - 공유: `src/shared/components/ui|layout`, `shared/constants`, `shared/data`.
  - 컴포넌트/클래스/타입은 PascalCase, 변수/함수/훅은 camelCase. 컴포넌트 파일은 `.tsx`, 훅/유틸은 `.ts`.
  - 경로 별칭 `@` 사용(예: `@/shared/...`, `@/features/...`).

- 라이브러리 사용
  - Chakra: 레이아웃/색상/경계/간격은 프롭(`w`, `h`, `bg`, `borderColor`, `px`, `py`, 등)으로 처리. 포털/오버레이는 `Portal`.
  - 색상: `shared/constants/colors.ts`의 `systemColors`/`statusColors`/`colors`/`componentColors` 활용. 직접 hex 하드코딩 금지.
  - 테마/모드: `shared/components/ui/color-mode.tsx`의 `ColorModeProvider`, `useColorMode`, `ColorModeButton` 사용.
  - 아이콘: `lucide-react`/`react-icons`를 Chakra `IconButton` 등과 조합.

- 컴포넌트 작성 패턴
  - 상단에 `Props` 인터페이스 정의 후, 매개변수 디스트럭처링에서 기본값 설정.
  - 입력 컴포넌트는 컨트롤드/언컨트롤드 모두 지원(`value`/`defaultValue` + `onChange`). 내부 상태는 언컨트롤드에서만 관리.
  - 파생 컬렉션/비용 큰 연산은 `useMemo`, 핸들러는 `useCallback`으로 메모이즈.
  - 접근성: 제공되는 라벨/트리거 컴포넌트(예: `Combobox.Label`, `IconButton`의 `aria-label`) 우선 사용.

- TypeScript 규칙
  - 타입 임포트는 `import type { ... }`로 분리. 라이브러리 Prop 타입은 인덱스 접근으로 참조(예: `Combobox.RootProps["size"]`).
  - 상수 객체는 `as const`로 고정하고 파생 타입은 `typeof` 사용.
  - `any` 지양, `unknown` → 정제 후 사용. 미사용 변수/파라미터 금지(`noUnused*`).
  - 부작용 임포트 최소화(`noUncheckedSideEffectImports`).

- 유지보수/추상화/클린 코드
  - 모듈 경계와 레이어
    - 라우트 → 페이지(Feature Entry) → 도메인 컴포넌트 → UI 프리미티브 순으로 의존. 상위 레이어가 하위에만 의존하도록 유지.
    - `shared`는 하위 레벨(범용)만 담고, 도메인 지식은 `features`에 둔다.
  - 추상화 수준 맞추기
    - 한 파일/함수 내부의 문장들은 비슷한 추상화 레벨로 유지. 세부로 내려가면 헬퍼로 분리.
    - 과도한 일반화 금지(YAGNI). 3회 이상 반복되거나 변경 비용이 큰 로직만 추출.
  - API 설계(컴포넌트/훅/함수)
    - Public surface는 작게, 단일 책임. 입력/출력 타입을 명확히 표현하고, 불린 플래그보다 옵션 객체 선호.
    - 의존성은 상위에서 주입(함수 인자/훅 옵션)하고, 전역 싱글톤 사용 최소화.
  - 제어 흐름
    - 가드 절과 조기 반환 사용. 조건 중첩은 2~3단계 이내. 예외적 흐름(에러/빈값)은 먼저 처리.
    - 사이드 이펙트는 가장자리로 밀어내고, 가능한 부분은 순수 함수로 유지.
  - 크기 기준(권장)
    - 컴포넌트/함수는 50~80줄 이내를 권장. 파일이 커지면 도메인 하위 단위로 분해.
  - 네이밍
    - 함수: 동사/동사구(`get`, `create`, `format`). 변수: 명사/명사구. 불린: `is/has/should` 접두사.
    - 컴포넌트는 도메인 역할을 드러내는 `PascalCase` 사용.
  - 에러/예외 처리
    - 예측 가능한 실패는 반환 타입으로 표현(Union/Result 패턴). 예측 불가/환경 오류는 throw하고 상위에서 처리.
    - UI 레벨 피드백은 `toaster` 등 표준 경로 사용.
  - 상태 관리
    - 로컬 상태 우선. 프롭 드릴링이 심해지면 Context 도입. 외부 상태 라이브러리는 필요 시 최소 범위로.
  - 테스트 우선순위(선택)
    - 복잡한 훅/포맷터/파서 우선. 접근성/상호작용이 중요한 컴포넌트는 RTL로 핵심 흐름만.
  - 주석
    - *무엇/어떻게*는 코드로 드러나게, 주석은 *왜*를 설명. TODO 남기기보다 즉시 정리/구현을 우선.

- 테스트(도입 시)
  - 러너는 Vitest + `@testing-library/react`(jsdom). 파일 인접 `*.test.ts(x)` 배치.
  - 훅: 입력→결과 검증. 컴포넌트: 접근성 쿼리(`getByRole`/`getByText`) 기준 렌더/인터랙션 테스트.

@src/shared/constants/colors.ts
@src/shared/components/ui/provider.tsx
@src/routes/\_\_root.tsx
